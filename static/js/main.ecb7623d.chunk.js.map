{"version":3,"sources":["styles.ts","components/TvShowListHeader/styles.ts","components/TvShowListHeader/index.tsx","components/TvShow/styles.ts","components/TvShow/index.tsx","components/TvShowListBody/index.tsx","components/Pagination/styles.ts","components/Pagination/index.tsx","containers/TvShowList/styles.ts","api/index.ts","api/getTVShow/index.ts","containers/TvShowList/index.tsx","utils/hooks/useTvShowList.ts","constants/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Global","createGlobalStyle","AppContainer","styled","div","TableHead","thead","TvShowListHeader","Cover","img","TableRow","tr","isEven","TvShow","id","cover","name","rating","duration","genres","country","alt","src","length","map","genre","TvShowListBody","tvShow","tvShowParams","PaginationContainer","PrevNextButtons","Grid","NumbersButtons","Pagination","pageCount","pageNumbers","paginate","prevPage","nextPage","currentPage","container","spacing","number","item","Button","size","onClick","variant","value","disabled","TvShowListBox","Table","table","request","axios","create","baseURL","process","headers","mapTvShow","image","weight","network","original","average","getTVShow","a","get","data","TvShowList","useState","setTvShows","setCurrentPage","lastIndexOnCurrentPage","firstIndexOnCurrentPage","tvShowOnCurrentPage","slice","Math","ceil","useCallback","event","currentTarget","useEffect","console","error","Array","from","v","k","useTvShowList","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecb7623d.chunk.js","sourcesContent":["import styled, { createGlobalStyle } from 'styled-components';\n\nexport const Global = createGlobalStyle`\n  *, html, body {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n`;\n\nexport const AppContainer = styled.div`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 0 15px;\n`;\n","import styled from 'styled-components';\n\nexport const TableHead = styled.thead`\n  font-size: 20px;\n  height: 70px;\n`;\n","import { FC } from 'react';\n\nimport { TableHead } from './styles';\n\nexport const TvShowListHeader: FC = () => (\n  <TableHead>\n    <tr>\n      <td>Обложка</td>\n      <td>Название</td>\n      <td>Жанр</td>\n      <td>Страна</td>\n      <td>Длительность</td>\n      <td>Рейтинг</td>\n    </tr>\n  </TableHead>\n);\n","import styled from 'styled-components';\n\nexport const Cover = styled.img`\n  width: 50px;\n`;\n\nexport const TableRow = styled.tr<{isEven: boolean}>`\n  background-color: ${({ isEven }) => isEven && '#CBE1DD'};\n`;\n","import { FC } from 'react';\n\nimport { Cover, TableRow } from './styles';\n\nexport const TvShow: FC<TvShowFormattedType> = ({\n  id,\n  cover,\n  name,\n  rating,\n  duration,\n  genres,\n  country,\n}) => (\n  <TableRow isEven={!(id % 2)}>\n    <td>\n      <Cover\n        alt=\"Cover\"\n        src={cover}\n      />\n    </td>\n    <td>{name}</td>\n    <td>{genres.length ? genres.map((genre: string) => genre) : '---'}</td>\n    <td>{country || '---'}</td>\n    <td>{`${duration} минут`}</td>\n    <td>{rating || '---'}</td>\n  </TableRow>\n);\n","import { FC } from 'react';\n\nimport { TvShow } from '../TvShow';\n\nexport const TvShowListBody: FC<{tvShow: TvShowFormattedType[]}> = ({ tvShow }) => (\n  <tbody>\n    {tvShow.map((tvShowParams: TvShowFormattedType) => (\n      <TvShow key={tvShowParams.id} {...tvShowParams} />\n    ))}\n  </tbody>\n);\n","import styled from 'styled-components';\nimport Grid from '@material-ui/core/Grid';\n\nexport const PaginationContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const PrevNextButtons = styled(Grid)``;\n\nexport const NumbersButtons = styled(Grid)`\n  margin-bottom: 20px;\n`;\n","import { FC } from 'react';\nimport { Button, Grid } from '@material-ui/core';\n\nimport { PaginationContainer, PrevNextButtons, NumbersButtons } from './styles';\n\ntype PaginationPropsType = {\n  pageCount: number;\n  pageNumbers: number[] | [];\n  paginate: (event: any) => void;\n  prevPage: () => void;\n  nextPage: () => void;\n  currentPage: number;\n};\n\nexport const Pagination: FC<PaginationPropsType> = ({\n  pageCount,\n  pageNumbers,\n  paginate,\n  prevPage,\n  nextPage,\n  currentPage,\n}) => (\n  <PaginationContainer>\n    <NumbersButtons container spacing={2}>\n      {pageNumbers.map((number) => (\n        <Grid item key={number}>\n          <Button\n            size=\"small\"\n            onClick={paginate}\n            variant={currentPage === number ? 'contained' : 'outlined'}\n            value={number}\n          >\n            {number}\n          </Button>\n        </Grid>\n      ))}\n    </NumbersButtons>\n    <PrevNextButtons container spacing={2}>\n      <Grid item>\n        <Button\n          disabled={currentPage === 1}\n          size=\"small\"\n          onClick={prevPage}\n          variant=\"contained\"\n        >\n          PrevPage\n        </Button>\n      </Grid>\n      <Grid item>\n        <Button\n          disabled={currentPage === pageCount}\n          size=\"small\"\n          onClick={nextPage}\n          variant=\"contained\"\n        >\n          NextPage\n        </Button>\n      </Grid>\n    </PrevNextButtons>\n  </PaginationContainer>\n);\n","import styled from 'styled-components';\n\nexport const TvShowListBox = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nexport const Table = styled.table`\n  border-collapse: collapse;\n  margin-bottom: 30px;\n`;\n","import axios from 'axios';\n\nexport const request = axios.create({\n  baseURL: process.env.REACT_APP_BASE_URL,\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n});\n","import { request } from '../index';\n\nconst mapTvShow = (tvShow: TvShowInitialType): TvShowFormattedType => {\n  const {\n    id, image, genres, name, rating, weight, network,\n  } = tvShow;\n\n  return {\n    id,\n    cover: image.original,\n    genres,\n    name,\n    rating: rating.average,\n    duration: weight,\n    country: network?.country?.name,\n  };\n};\n\nexport const getTVShow = async (): Promise<TvShowFormattedType[]> => {\n  const { data } = await request.get<TvShowInitialType[]>('shows?page=1');\n\n  return data.map(mapTvShow);\n};\n","import { FC } from 'react';\n\nimport { TvShowListHeader } from '../../components/TvShowListHeader';\nimport { TvShowListBody } from '../../components/TvShowListBody';\nimport { Pagination } from '../../components/Pagination';\nimport { TvShowListBox, Table } from './styles';\nimport { useTvShowList } from '../../utils/hooks';\n\nexport const TvShowList: FC = () => {\n  const {\n    tvShow,\n    pageNumbers,\n    paginate,\n    prevPage,\n    nextPage,\n    currentPage,\n    pageCount,\n  } = useTvShowList();\n\n  return (\n    <TvShowListBox>\n      <Table>\n        <TvShowListHeader />\n        <TvShowListBody tvShow={tvShow} />\n      </Table>\n      <Pagination\n        pageCount={pageCount}\n        pageNumbers={pageNumbers}\n        paginate={paginate}\n        prevPage={prevPage}\n        nextPage={nextPage}\n        currentPage={currentPage}\n      />\n    </TvShowListBox>\n  );\n};\n","import { useState, useEffect, useCallback } from 'react';\n\nimport { getTVShow } from '../../api/getTVShow';\nimport { TV_SHOWS_PER_PAGE } from '../../constants';\n\nexport const useTvShowList = () => {\n  const [tvShow, setTvShows] = useState<TvShowFormattedType[] | []>([]);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n\n  const lastIndexOnCurrentPage: number = currentPage * TV_SHOWS_PER_PAGE;\n  const firstIndexOnCurrentPage: number = lastIndexOnCurrentPage - TV_SHOWS_PER_PAGE;\n  const tvShowOnCurrentPage: TvShowFormattedType[] | [] = tvShow.slice(\n    firstIndexOnCurrentPage,\n    lastIndexOnCurrentPage,\n  );\n  const pageCount: number = Math.ceil(tvShow.length / TV_SHOWS_PER_PAGE);\n\n  const paginate = useCallback(\n    (event: any) => setCurrentPage(+event.currentTarget.value),\n    [currentPage],\n  );\n\n  const nextPage = useCallback(\n    () => setCurrentPage((currentPage) => currentPage + 1),\n    [currentPage],\n  );\n\n  const prevPage = useCallback(\n    () => setCurrentPage((currentPage) => currentPage - 1),\n    [currentPage],\n  );\n\n  useEffect(() => {\n    (async () => {\n      try {\n        const tvShow = await getTVShow();\n        setTvShows(tvShow);\n      } catch (error) {\n        console.error(error);\n      }\n    })();\n  }, []);\n\n  const pageNumbers = Array.from({ length: pageCount }, (v, k) => k + 1);\n\n  return {\n    tvShow: tvShowOnCurrentPage,\n    pageNumbers,\n    paginate,\n    nextPage,\n    prevPage,\n    currentPage,\n    pageCount,\n  };\n};\n","export const TV_SHOWS_PER_PAGE: number = 50;\n","import React from 'react';\nimport { AppContainer } from './styles';\nimport { TvShowList } from './containers/TvShowList';\n\nfunction App() {\n  return (\n    <AppContainer>\n      <TvShowList />\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Global } from './styles';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Global />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals();\n"],"sourceRoot":""}